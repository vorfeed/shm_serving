// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace shm_serving {

namespace {

const ::google::protobuf::Descriptor* NamedLoader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NamedLoader_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataServiceConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataServiceConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  NamedLoader_descriptor_ = file->message_type(0);
  static const int NamedLoader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedLoader, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedLoader, exclusive_),
  };
  NamedLoader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NamedLoader_descriptor_,
      NamedLoader::default_instance_,
      NamedLoader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedLoader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NamedLoader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NamedLoader));
  DataServiceConfig_descriptor_ = file->message_type(1);
  static const int DataServiceConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataServiceConfig, named_loaders_),
  };
  DataServiceConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataServiceConfig_descriptor_,
      DataServiceConfig::default_instance_,
      DataServiceConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataServiceConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataServiceConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataServiceConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NamedLoader_descriptor_, &NamedLoader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataServiceConfig_descriptor_, &DataServiceConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete NamedLoader::default_instance_;
  delete NamedLoader_reflection_;
  delete DataServiceConfig::default_instance_;
  delete DataServiceConfig_reflection_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\013shm_serving\"3\n\013NamedLoad"
    "er\022\021\n\tfile_name\030\001 \002(\t\022\021\n\texclusive\030\002 \001(\010"
    "\"D\n\021DataServiceConfig\022/\n\rnamed_loaders\030\001"
    " \003(\0132\030.shm_serving.NamedLoader", 150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  NamedLoader::default_instance_ = new NamedLoader();
  DataServiceConfig::default_instance_ = new DataServiceConfig();
  NamedLoader::default_instance_->InitAsDefaultInstance();
  DataServiceConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NamedLoader::kFileNameFieldNumber;
const int NamedLoader::kExclusiveFieldNumber;
#endif  // !_MSC_VER

NamedLoader::NamedLoader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NamedLoader::InitAsDefaultInstance() {
}

NamedLoader::NamedLoader(const NamedLoader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NamedLoader::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exclusive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NamedLoader::~NamedLoader() {
  SharedDtor();
}

void NamedLoader::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void NamedLoader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NamedLoader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NamedLoader_descriptor_;
}

const NamedLoader& NamedLoader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();  return *default_instance_;
}

NamedLoader* NamedLoader::default_instance_ = NULL;

NamedLoader* NamedLoader::New() const {
  return new NamedLoader;
}

void NamedLoader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    exclusive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NamedLoader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exclusive;
        break;
      }
      
      // optional bool exclusive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclusive_)));
          set_has_exclusive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NamedLoader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }
  
  // optional bool exclusive = 2;
  if (has_exclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exclusive(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NamedLoader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }
  
  // optional bool exclusive = 2;
  if (has_exclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exclusive(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NamedLoader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional bool exclusive = 2;
    if (has_exclusive()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NamedLoader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NamedLoader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NamedLoader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NamedLoader::MergeFrom(const NamedLoader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_exclusive()) {
      set_exclusive(from.exclusive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NamedLoader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedLoader::CopyFrom(const NamedLoader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedLoader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NamedLoader::Swap(NamedLoader* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(exclusive_, other->exclusive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NamedLoader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NamedLoader_descriptor_;
  metadata.reflection = NamedLoader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataServiceConfig::kNamedLoadersFieldNumber;
#endif  // !_MSC_VER

DataServiceConfig::DataServiceConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataServiceConfig::InitAsDefaultInstance() {
}

DataServiceConfig::DataServiceConfig(const DataServiceConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataServiceConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataServiceConfig::~DataServiceConfig() {
  SharedDtor();
}

void DataServiceConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataServiceConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataServiceConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataServiceConfig_descriptor_;
}

const DataServiceConfig& DataServiceConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();  return *default_instance_;
}

DataServiceConfig* DataServiceConfig::default_instance_ = NULL;

DataServiceConfig* DataServiceConfig::New() const {
  return new DataServiceConfig;
}

void DataServiceConfig::Clear() {
  named_loaders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataServiceConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .shm_serving.NamedLoader named_loaders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_named_loaders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_named_loaders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_named_loaders;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataServiceConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .shm_serving.NamedLoader named_loaders = 1;
  for (int i = 0; i < this->named_loaders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->named_loaders(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataServiceConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .shm_serving.NamedLoader named_loaders = 1;
  for (int i = 0; i < this->named_loaders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->named_loaders(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataServiceConfig::ByteSize() const {
  int total_size = 0;
  
  // repeated .shm_serving.NamedLoader named_loaders = 1;
  total_size += 1 * this->named_loaders_size();
  for (int i = 0; i < this->named_loaders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->named_loaders(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataServiceConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataServiceConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataServiceConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataServiceConfig::MergeFrom(const DataServiceConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  named_loaders_.MergeFrom(from.named_loaders_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataServiceConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataServiceConfig::CopyFrom(const DataServiceConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceConfig::IsInitialized() const {
  
  for (int i = 0; i < named_loaders_size(); i++) {
    if (!this->named_loaders(i).IsInitialized()) return false;
  }
  return true;
}

void DataServiceConfig::Swap(DataServiceConfig* other) {
  if (other != this) {
    named_loaders_.Swap(&other->named_loaders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataServiceConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataServiceConfig_descriptor_;
  metadata.reflection = DataServiceConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace shm_serving

// @@protoc_insertion_point(global_scope)
